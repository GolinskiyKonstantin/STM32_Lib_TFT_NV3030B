/*

  ******************************************************************************
  * @file 			( фаил ):   round_vertical_horizontal_scale.h
  * @brief 		( описание ):  	
  ******************************************************************************
  * @attention 	( внимание ):  	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
  ******************************************************************************
  
  для работы подключаем в проект #include "round_vertical_horizontal_scale.h"
  
   ////////////////////////////////////////////////////////////////////////////////////////////////////////

	//=========================================================================
	//-------------------------------------------------------------------------
	// заполняем структуры настройками для круглой шкалы
	scale_round_type RoundScale = {
		// colors
		.colorForeground = RGB565(255, 255, 255),		// цвет линий шкалы
		.colorBackground = RGB565(50, 150, 50),			// цвет фона под шкалой и текстом
		.colorText = RGB565(210, 210, 210),					// цвет текста
		
		// round
		.radiusRound = 300,													// радиус круга ( дуга шкалы )
		.offsetCoordX = -250,												// смещуние центра круга по оси Х ( смещаем за приделы экрана чтобы было видно только часть круга )
		.offsetCoordY = 350/2,											// смещуние центра круга по оси У ( смещаем на середину экрана - высота экрана деленная пополам )
		
		// length line
		.lengthLineIneer = 10,											// длина короткой линии
		.lengthLineShotr = 15,											// длина средней линии
		.lengthLineLong = 20,												// длина длинной линии
		.lengthRoundText = 8,												// растояние от шкалы до текста
		
		// coeff offset unvisible
		.coeffUnvisibleLX = 0,											// коэфф смещения ( начало или конец шкалы ) лево по оси Х
		.coeffUnvisibleRX = 0,											// коэфф смещения ( начало или конец шкалы ) право по оси Х
		.coeffUnvisibleUY = 85,											// коэфф смещения ( начало или конец шкалы ) вверх по оси У
		.coeffUnvisibleDY = 15,											// коэфф смещения ( начало или конец шкалы ) вниз по оси У
	};

	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	// функция инициализации круглой шкалы
	scale_round_init( &RoundScale );
	//-------------------------------------------------------------------------
	
	//=========================================================================
	
	
	
	
	//=========================================================================
	
	//-------------------------------------------------------------------------
	// заполняем структуры настройками для вертикальной шкалы
	scale_vertical_type VerticalScale = {
		// colors
		.colorForeground = RGB565(255, 255, 255),		// цвет линий шкалы
		.colorBackground = RGB565(50, 150, 50),			// цвет фона под шкалой и текстом
		.colorText = RGB565(210, 210, 210),					// цвет текста
		
		// vertical
		.offsetCoordX = 195,												// смещуние шкалы по оси Х
		.offsetStartZeroY = 350/2,									// смещение по У установка нулевого значения ( где будет маркер значение )
		.offsetCoeff = (300*2*3.14159265)/360,			// коэфф растояния между линиями шкалы 
																								// ( для того чтобы был такойже как и круглая шкала нужно (300*2*3.14159265)/360    
																								// где 300 ето радиус круглой шкалы .radiusRound				
		
		// length line
		.lengthLineIneer = 10,											// длина короткой линии
		.lengthLineShotr = 15,											// длина средней линии
		.lengthLineLong = 20,												// длина длинной линии
		.lengthVerticalText = 35,										// растояние от шкалы до текста
		
		// coeff offset unvisible
		.coeffUnvisibleLX = 0,											// коэфф смещения ( начало или конец шкалы ) лево по оси Х
		.coeffUnvisibleRX = 0,											// коэфф смещения ( начало или конец шкалы ) право по оси Х
		.coeffUnvisibleUY = 85,											// коэфф смещения ( начало или конец шкалы ) вверх по оси У
		.coeffUnvisibleDY = 15,											// коэфф смещения ( начало или конец шкалы ) вниз по оси У
	};

	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	// функция инициализации вертикальной шкалы
	scale_vertical_init( &VerticalScale );
	//-------------------------------------------------------------------------
	//=========================================================================
	
	
	
	
	//=========================================================================
	
	//-------------------------------------------------------------------------
	// заполняем структуры настройками для вертикальной шкалы
	scale_horizontal_type HorizontalScale = {
		// colors
		.colorForeground = RGB565(255, 255, 255),		// цвет линий шкалы
		.colorBackground = RGB565(50, 150, 50),			// цвет фона под шкалой и текстом
		.colorText = RGB565(210, 210, 210),					// цвет текста
		
		// vertical
		.offsetCoordY = 26,													// смещуние шкалы по оси Y
		.offsetStartZeroX = 240/2,									// смещение по X установка нулевого значения ( где будет маркер значение )
		.offsetCoeff = (300*2*3.14159265)/360,			// коэфф растояния между линиями шкалы 
																								// ( для того чтобы был такойже как и круглая шкала нужно (300*2*3.14159265)/360    
																								// где 300 ето радиус круглой шкалы .radiusRound				
		
		// length line
		.lengthLineIneer = 10,											// длина короткой линии
		.lengthLineShotr = 15,											// длина средней линии
		.lengthLineLong = 20,												// длина длинной линии
		.lengthHorizontalText = 8,									// растояние от шкалы до текста
		
		// coeff offset unvisible
		.coeffUnvisibleLX = 40,											// коэфф смещения ( начало или конец шкалы ) лево по оси Х
		.coeffUnvisibleRX = 40,											// коэфф смещения ( начало или конец шкалы ) право по оси Х
		.coeffUnvisibleUY = 0,											// коэфф смещения ( начало или конец шкалы ) вверх по оси У
		.coeffUnvisibleDY = 0,											// коэфф смещения ( начало или конец шкалы ) вниз по оси У
	};

	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	// функция инициализации вертикальной шкалы
	scale_horizontal_init( &HorizontalScale );
	//-------------------------------------------------------------------------
	//=========================================================================
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////	




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// закрашиваем весь экран указаным цветом 
		NV3030B_FillScreen( RGB565(50, 150, 50) );
		
		angle++;
		if( angle == 360 ){ angle = 0; }
		
		//------------------------------------------------------------------	
		// функция прорисовки круглой шкалы
		// первый парам: структура с настройками шкалы
		// второй парам: угол от 0 до 359 или от-180 до 180
		// третий парам: формат ANGLE_FORMAT_180 или ANGLE_FORMAT_360
		// четвертый парам: шинина дисплея в пикселях
		// пяты парам: высота дисплея в пикселях
		scale_round_draw( &RoundScale, angle, ANGLE_FORMAT_360, 240, 280 );
		//------------------------------------------------------------------	
		
		
		//------------------------------------------------------------------	
		// функция прорисовки вертикальной шкалы
		// первый парам: структура с настройками шкалы
		// второй парам: угол от 0 до 359 или от-180 до 180
		// третий парам: формат ANGLE_FORMAT_180 или ANGLE_FORMAT_360
		// четвертый парам: шинина дисплея в пикселях
		// пяты парам: высота дисплея в пикселях
		scale_vertical_draw( &VerticalScale, angle, ANGLE_FORMAT_360, 240, 280 );
		
		//------------------------------------------------------------------	
		// функция прорисовки горизонтальной шкалы
		// первый парам: структура с настройками шкалы
		// второй парам: угол от 0 до 359 или от-180 до 180
		// третий парам: формат ANGLE_FORMAT_180 или ANGLE_FORMAT_360
		// четвертый парам: шинина дисплея в пикселях
		// пяты парам: высота дисплея в пикселях
		scale_horizontal_draw( &HorizontalScale, angle, ANGLE_FORMAT_360, 240, 280 );
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 



 
	 // красные стрелки для круглой шкалы -----------------------------------------------------------
	 NV3030B_DrawFilledTriangle( 20, 350/2, 10, 350/2+10 , 10, 350/2-10 , RGB565(255, 0, 0) );
	 NV3030B_DrawFilledTriangle( 90, 350/2, 100, 350/2+10 , 100, 350/2-10 , RGB565(255, 0, 0) );
	 //----------------------------------------------------------------------------------------------
	 
	 // красные стрелки для вертикальной шкалы -----------------------------------------------------------
	 NV3030B_DrawFilledTriangle( 150, 350/2, 140, 350/2+10 , 140, 350/2-10 , RGB565(255, 0, 0) );
	 NV3030B_DrawFilledTriangle( 225, 350/2, 235, 350/2+10 , 235, 350/2-10 , RGB565(255, 0, 0) );
	 //----------------------------------------------------------------------------------------------
	
	// красные стрелки для горизонтальной шкалы -----------------------------------------------------------
	 NV3030B_DrawFilledTriangle( 240/2, 48, 240/2+10, 58 , 240/2-10, 58, RGB565(255, 0, 0) );
	 //----------------------------------------------------------------------------------------------
 
	#if FRAME_BUFFER	// если включен буфер кадра
		NV3030B_Update();
	#endif	

 /////////////////////////////////////////////////////////////////////////////////////////////////////
 
 
	
*/

#ifndef _ANALOG_SCALE_H
#define _ANALOG_SCALE_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ----------------------------------------------------------*/

#include "main.h"



typedef enum:uint8_t{
	ANGLE_FORMAT_360,
	ANGLE_FORMAT_180
}angle_format_type;




//------------------------------------------------------------------
// структура для настройки круглой шкалы
typedef struct{
		// colors
		uint16_t colorForeground;
		uint16_t colorBackground;
		uint16_t colorText;
		
		// round
		uint16_t radiusRound;
		int16_t offsetCoordX;
		int16_t offsetCoordY;
		
		// length line
		uint8_t	lengthLineIneer;
		uint8_t	lengthLineShotr;
		uint8_t	lengthLineLong;
		uint8_t	lengthRoundText;
		
		// coeff offset unvisible
		uint8_t	coeffUnvisibleLX;
		uint8_t	coeffUnvisibleRX;
		uint8_t	coeffUnvisibleUY;
		uint8_t	coeffUnvisibleDY;
		
		// coord
		float pointOuterX[360]; 		//outer point
		float pointOuterY[360];
		float pointIneerX[360]; 		//ineer point
		float pointIneerY[360];
		float pointLongX[360]; 			//long line 
		float pointLongY[360];
		float pointShortX[360]; 		//short line 
		float pointShortY[360];
		float pointTextX[360]; 			//text
		float pointTextY[360];
}scale_round_type;
//------------------------------------------------------------------	

//------------------------------------------------------------------
// структура для настройки вертикальной шкалы
typedef struct{
		// colors
		uint16_t colorForeground;
		uint16_t colorBackground;
		uint16_t colorText;
		
		// vertical
		int16_t offsetCoordX;
		int16_t offsetStartZeroY;
		int16_t offsetCoeff;
		
		// length line
		uint8_t	lengthLineIneer;
		uint8_t	lengthLineShotr;
		uint8_t	lengthLineLong;
		uint8_t	lengthVerticalText;
		
		// coeff offset unvisible
		uint8_t	coeffUnvisibleLX;
		uint8_t	coeffUnvisibleRX;
		uint8_t	coeffUnvisibleUY;
		uint8_t	coeffUnvisibleDY;
		
		// coord
		float pointOuterX[360]; 		//outer point
		float pointIneerX[360]; 		//ineer point
		float pointLongX[360]; 			//long line 
		float pointShortX[360]; 		//short line 
		float pointTextX[360]; 			//text
		float pointTotalY[360];
}scale_vertical_type;
//------------------------------------------------------------------	


//------------------------------------------------------------------
// структура для настройки горизонтальной шкалы
typedef struct{
		// colors
		uint16_t colorForeground;
		uint16_t colorBackground;
		uint16_t colorText;
		
		// vertical
		int16_t offsetCoordY;
		int16_t offsetStartZeroX;
		int16_t offsetCoeff;
		
		// length line
		uint8_t	lengthLineIneer;
		uint8_t	lengthLineShotr;
		uint8_t	lengthLineLong;
		uint8_t	lengthHorizontalText;
		
		// coeff offset unvisible
		uint8_t	coeffUnvisibleLX;
		uint8_t	coeffUnvisibleRX;
		uint8_t	coeffUnvisibleUY;
		uint8_t	coeffUnvisibleDY;
		
		// coord
		float pointOuterY[360]; 		//outer point
		float pointIneerY[360]; 		//ineer point
		float pointLongY[360]; 			//long line 
		float pointShortY[360]; 		//short line 
		float pointTextY[360]; 			//text
		float pointTotalX[360];
}scale_horizontal_type;
//------------------------------------------------------------------	



//==================================================================
//------------------------------------------------------------------
// функция инициализации круглой шкалы
void scale_round_init(scale_round_type* round);
//------------------------------------------------------------------	

//------------------------------------------------------------------	
// функция прорисовки круглой шкалы
// первый парам: структура с настройками шкалы
// второй парам: угол от 0 до 359 или от-180 до 180
// третий парам: формат ANGLE_FORMAT_180 или ANGLE_FORMAT_360
// четвертый парам: шинина дисплея в пикселях
// пяты парам: высота дисплея в пикселях
void scale_round_draw(scale_round_type* round, int16_t angle, angle_format_type format, uint16_t width_display, uint16_t height_display );
//=========================================================================




//=========================================================================
//------------------------------------------------------------------
// функция инициализации вертикальной шкалы
void scale_vertical_init(scale_vertical_type* vertical);
//------------------------------------------------------------------

//------------------------------------------------------------------	
// функция прорисовки вертикальной шкалы
// первый парам: структура с настройками шкалы
// второй парам: угол от 0 до 359 или от-180 до 180
// третий парам: формат ANGLE_FORMAT_180 или ANGLE_FORMAT_360
// четвертый парам: шинина дисплея в пикселях
// пяты парам: высота дисплея в пикселях
void scale_vertical_draw(scale_vertical_type* vertical, int16_t angle, angle_format_type format, uint16_t width_display, uint16_t height_display );
//==================================================================




//==================================================================
//------------------------------------------------------------------
// функция инициализации горизонтальной шкалы
void scale_horizontal_init(scale_horizontal_type* horizontal);
//------------------------------------------------------------------

//------------------------------------------------------------------	
// функция прорисовки горизонтальной шкалы
// первый парам: структура с настройками шкалы
// второй парам: угол от 0 до 359 или от-180 до 180
// третий парам: формат ANGLE_FORMAT_180 или ANGLE_FORMAT_360
// четвертый парам: шинина дисплея в пикселях
// пяты парам: высота дисплея в пикселях
void scale_horizontal_draw(scale_horizontal_type* horizontal, int16_t angle, angle_format_type format, uint16_t width_display, uint16_t height_display );
//------------------------------------------------------------------------------------
//==================================================================




#ifdef __cplusplus
}
#endif

#endif	/*	_ANALOG_SCALE_H */

/************************ (C) COPYRIGHT GKP *****END OF FILE****/
